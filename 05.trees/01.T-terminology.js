// Binary tree
/*
Un √°rbol binario es una estructura de datos jer√°rquica que se compone de nodos conectados entre s√≠.

üîë Caracter√≠sticas principales:

Cada nodo puede tener como m√°ximo dos hijos:

Hijo izquierdo (left child)

Hijo derecho (right child)

El nodo m√°s alto se llama ra√≠z (root).

Los nodos que no tienen hijos se llaman hojas (leaf nodes).

Cada sub√°rbol tambi√©n es, en s√≠ mismo, un √°rbol binario.

üìå Ejemplo visual de un √°rbol binario:

        (10)        ‚Üê ra√≠z
       /    \
    (5)      (15)
   /  \      /
 (2)  (7)  (12)


‚û°Ô∏è Aqu√≠:

10 es la ra√≠z.

5 es hijo izquierdo de 10, y 15 es hijo derecho.

2 y 7 son hijos de 5.

12 es hijo izquierdo de 15.

2, 7 y 12 son hojas porque no tienen hijos.

‚ö° Tipos comunes de √°rboles binarios:

√Årbol binario lleno: cada nodo tiene o 2 o 0 hijos

√Årbol binario completo: todos los niveles est√°n llenos, excepto quiz√° el √∫ltimo, que se llena de izquierda a derecha.

√Årbol binario perfecto: todos los nodos tienen 2 hijos y todas las hojas est√°n en el mismo nivel.

√Årbol binario de b√∫squeda (Binary Search Tree, BST): los valores del sub√°rbol izquierdo son menores que el nodo, y los del derecho son mayores.

√Årbol binario balanceado: intenta mantener las ramas de igual altura para mejorar la eficiencia en b√∫squedas.
*/

/*
  ‚è≥ Operaciones comunes en un √Årbol Binario de B√∫squeda (BST):

  B√∫squeda (Search)

  Inserci√≥n (Insert)

  Eliminaci√≥n (Delete)

  ‚úÖ Caso ideal: √Årbol binario balanceado

  Cada vez que bajas de un nodo, descartas la mitad de los elementos (parecido a b√∫squeda binaria).

  La altura del √°rbol es log‚ÇÇ(n), donde n es el n√∫mero de nodos.

  Entonces:

  B√∫squeda ‚Üí O(log n)

  Inserci√≥n ‚Üí O(log n)

  Eliminaci√≥n ‚Üí O(log n)

 ‚ùå Peor caso: √Årbol desbalanceado (degenerado)

  Si siempre insertas valores en orden (ejemplo: 1, 2, 3, 4, 5...), el √°rbol se convierte en una lista enlazada:

  1
    \
      2
      \
        3
        \
          4
          \
            5

  Aqu√≠ la altura es n.
  Entonces:

  B√∫squeda ‚Üí O(n)

  Inserci√≥n ‚Üí O(n)

  Eliminaci√≥n ‚Üí O(n)

  ‚ö° √Årboles especiales que mantienen el balanceo autom√°ticamente

  AVL Tree

  Red-Black Tree

  B-Tree (para bases de datos)

  En estos, siempre garantizan:

  B√∫squeda ‚Üí O(log n)

  Inserci√≥n ‚Üí O(log n)

  Eliminaci√≥n ‚Üí O(log n)
*/